doctype html
html(lang="en")
    head
        meta(charset="utf-8")
        title REACT REDUX - FIRST CONTACT (A HANDS ON TUTORIAL)

        meta(name="description" content="A tutorial for people which would like to start using react but they don't know how to start")
        meta(name="author" content="Fran Nunez")

        meta(name="apple-mobile-web-app-capable" content="yes")
        meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")

        meta(name="viewport" content="width=device-width,"
        + "initial-scale=1.0,"
        + "maximum-scale=1.0,"
        + "user-scalable=no")

        link(rel="stylesheet" href="main.css")

    body
        .reveal
            // Any section element inside of this container is displayed as a slide
            .slides
                section(data-transition="zoom")
                    h1 REACT REDUX FIRST CONTACT
                    div
                        img(class="logo" src="images/redux2.png")
                section(data-transition="zoom")
                    section
                        h1 WHAT IS REDUX?
                    section
                        h2 Library to help you to deal with states in JS
                        ul
                            li Framework Agnostic (React, Angular, Meteor, Ember, Backbone, Vue.js...)
                            li Small (About 2kb including dependencies)
                            li Manages the state of the data *
                            li Keeps the whole state of the app in a single store (JS Object)
                            li To change a state we need to dispatch actions (Described in another JS Object) Simple!
                            li Actions are binded to reducers  [The real function]
                    section
                        h2 Differences with other patterns
                        ul
                            li MVC - Data is bidirectional vs Unidirectional
                            li MVC - Affect multiple parts of the code vs Code related to the data is together
                            li Flux - Many stores are used vs One store
                            li Flux - Changes are Dispatched as events and Components can subscribe that events vs Broadcast payloads to callbacks
                section(data-transition="zoom")
                    section
                        h1 LEARNING REDUX
                    section
                        h2 The Basics
                        ul
                            li State
                            li Actions
                            li Reducers
                            li Store
                    section
                        h2 State
                        p Redux uses a plain JS object to describe the state of the data.
                        p Redux keeps the state of an entire application in a single immutable state tree (object). When something changes a new object is created.
                        pre
                            code(class="language-js").
                                {
                                  todos: [{
                                    text: 'Eat food',
                                    completed: true
                                  }, {
                                    text: 'Exercise',
                                    completed: false
                                  }],
                                  visibilityFilter: 'SHOW_COMPLETED'
                                }
                    section
                        h2 Actions
                        p To change a state we need to dispatch actions described in a JS Object.
                        p Actions can be user interactions, API calls...
                        span
                        pre
                            code(class="language-js").
                                //Action
                                {
                                  type: ADD_TODO,
                                  text: 'Buy Nintendo Switch'
                                }

                                //Action creator
                                function addTodo(text) {
                                  return {
                                    type: ADD_TODO,
                                    text
                                  }
                                }

                                //Dispatch
                                dispatch(addTodo(text))
                    section
                        h2 Reducers
                        p Actions are bound to reducers [The real function]
                        p Reducers get the current state and the action and returns the next state.
                        pre
                            code(class="language-js").
                                function todoApp(state = {}, action) {
                                  return {
                                    todos: todos(state.todos, action),
                                    visibilityFilter: visibilityFilter(state.visibilityFilter, action)
                                  };
                                }
                    section
                        h2 Combining Reducers
                        p For more complex apps, using the combineReducers() utility provided by Redux is recommended. It combines all of the reducers in the app into a single index reducer.
                        pre
                            code(class="language-js").
                                function visibilityFilter(state = SHOW_ALL, action) {...}
                                function todos(state = [], action) {...}

                                const todoApp = combineReducers({
                                  visibilityFilter,
                                  todos
                                })
                    section
                        h2 Store
                        p The state of the app is represented by a single store which is a plain object as we have seen previously.
                        pre
                            code(class="language-js").
                                import { createStore } from 'redux'
                                import todoApp from './reducers'
                                let store = createStore(todoApp)
                section(data-transition="zoom")
                    section
                        h1 REDUX DATA FLOW
                    section
                        img(class="data-flow" src="images/redux-data-flow.png")
                    section
                        h2 Data Flow (Sync)
                        p Without middleware, Redux store only supports synchronous data flow.
                        ul
                            li You call an action -> store.dispatch(action)
                            li Redux store calls the asociated reducer -> Store will pass to the reducer the current state and the action.
                            li Root reducer (when necessary) will combine multiple reducers into a single state tree
                            li Redux store saves the new state and the changes are propagated to the UI
                    section
                        h2 Data Flow (Async)
                        ul
                            li Asynchronous middleware like redux-thunk wraps the store's dispatch() method and allows you to dispatch something other than actions, for example, functions or Promises
                            li When the last middleware in the chain dispatches an action, it has to be a plain object. This is when the synchronous Redux data flow takes place.
                section
                    h1 THANK YOU!
                    h2 BY Fran Nunez
        script(src="/react-hands-on.min.js")